{"$message_type":"diagnostic","message":"the trait bound `soroban_sdk::Error: From<&str>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":866,"byte_end":887,"line_start":28,"line_end":28,"column_start":37,"column_end":58,"is_primary":true,"text":[{"text":"            panic_with_error!(&env, \"Already initialized\");","highlight_start":37,"highlight_end":58}],"label":"the trait `From<&str>` is not implemented for `soroban_sdk::Error`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/matiasboldrini/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/soroban-sdk-23.0.2/src/lib.rs","byte_start":28264,"byte_end":28280,"line_start":903,"line_end":903,"column_start":14,"column_end":30,"is_primary":false,"text":[{"text":"        $env.panic_with_error($error);","highlight_start":14,"highlight_end":30}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":842,"byte_end":888,"line_start":28,"line_end":28,"column_start":13,"column_end":59,"is_primary":false,"text":[{"text":"            panic_with_error!(&env, \"Already initialized\");","highlight_start":13,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"panic_with_error!","def_site_span":{"file_name":"/Users/matiasboldrini/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/soroban-sdk-23.0.2/src/lib.rs","byte_start":28184,"byte_end":28213,"line_start":901,"line_end":901,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"macro_rules! panic_with_error {","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `soroban_sdk::Error` implements `From<&soroban_sdk::Error>`\n  `soroban_sdk::Error` implements `From<(soroban_sdk::xdr::ScErrorType, soroban_sdk::xdr::ScErrorCode)>`\n  `soroban_sdk::Error` implements `From<ConversionError>`\n  `soroban_sdk::Error` implements `From<Infallible>`\n  `soroban_sdk::Error` implements `From<soroban_env_common::symbol::SymbolError>`\n  `soroban_sdk::Error` implements `From<soroban_sdk::xdr::Error>`\n  `soroban_sdk::Error` implements `From<soroban_sdk::xdr::ScError>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&str` to implement `Into<soroban_sdk::Error>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `Env::panic_with_error`","code":null,"level":"note","spans":[{"file_name":"/Users/matiasboldrini/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/soroban-sdk-23.0.2/src/env.rs","byte_start":8660,"byte_end":8681,"line_start":276,"line_end":276,"column_start":48,"column_end":69,"is_primary":true,"text":[{"text":"    pub fn panic_with_error(&self, error: impl Into<internal::Error>) -> ! {","highlight_start":48,"highlight_end":69}],"label":"required by this bound in `Env::panic_with_error`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `soroban_sdk::Error: From<&str>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:28:37\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            panic_with_error!(&env, \"Already initialized\");\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<&str>` is not implemented for `soroban_sdk::Error`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<&soroban_sdk::Error>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<(soroban_sdk::xdr::ScErrorType, soroban_sdk::xdr::ScErrorCode)>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<ConversionError>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<Infallible>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<soroban_env_common::symbol::SymbolError>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<soroban_sdk::xdr::Error>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<soroban_sdk::xdr::ScError>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&str` to implement `Into<soroban_sdk::Error>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `Env::panic_with_error`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/matiasboldrini/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/soroban-sdk-23.0.2/src/env.rs:276:48\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m276\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn panic_with_error(&self, error: impl Into<internal::Error>) -> ! {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Env::panic_with_error`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `soroban_sdk::Error: From<&str>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":2855,"byte_end":2877,"line_start":101,"line_end":101,"column_start":37,"column_end":59,"is_primary":true,"text":[{"text":"            panic_with_error!(&env, \"Insufficient balance\");","highlight_start":37,"highlight_end":59}],"label":"the trait `From<&str>` is not implemented for `soroban_sdk::Error`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/matiasboldrini/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/soroban-sdk-23.0.2/src/lib.rs","byte_start":28264,"byte_end":28280,"line_start":903,"line_end":903,"column_start":14,"column_end":30,"is_primary":false,"text":[{"text":"        $env.panic_with_error($error);","highlight_start":14,"highlight_end":30}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":2831,"byte_end":2878,"line_start":101,"line_end":101,"column_start":13,"column_end":60,"is_primary":false,"text":[{"text":"            panic_with_error!(&env, \"Insufficient balance\");","highlight_start":13,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"panic_with_error!","def_site_span":{"file_name":"/Users/matiasboldrini/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/soroban-sdk-23.0.2/src/lib.rs","byte_start":28184,"byte_end":28213,"line_start":901,"line_end":901,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"macro_rules! panic_with_error {","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `soroban_sdk::Error` implements `From<&soroban_sdk::Error>`\n  `soroban_sdk::Error` implements `From<(soroban_sdk::xdr::ScErrorType, soroban_sdk::xdr::ScErrorCode)>`\n  `soroban_sdk::Error` implements `From<ConversionError>`\n  `soroban_sdk::Error` implements `From<Infallible>`\n  `soroban_sdk::Error` implements `From<soroban_env_common::symbol::SymbolError>`\n  `soroban_sdk::Error` implements `From<soroban_sdk::xdr::Error>`\n  `soroban_sdk::Error` implements `From<soroban_sdk::xdr::ScError>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&str` to implement `Into<soroban_sdk::Error>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `Env::panic_with_error`","code":null,"level":"note","spans":[{"file_name":"/Users/matiasboldrini/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/soroban-sdk-23.0.2/src/env.rs","byte_start":8660,"byte_end":8681,"line_start":276,"line_end":276,"column_start":48,"column_end":69,"is_primary":true,"text":[{"text":"    pub fn panic_with_error(&self, error: impl Into<internal::Error>) -> ! {","highlight_start":48,"highlight_end":69}],"label":"required by this bound in `Env::panic_with_error`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `soroban_sdk::Error: From<&str>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:101:37\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m101\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            panic_with_error!(&env, \"Insufficient balance\");\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<&str>` is not implemented for `soroban_sdk::Error`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<&soroban_sdk::Error>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<(soroban_sdk::xdr::ScErrorType, soroban_sdk::xdr::ScErrorCode)>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<ConversionError>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<Infallible>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<soroban_env_common::symbol::SymbolError>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<soroban_sdk::xdr::Error>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<soroban_sdk::xdr::ScError>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&str` to implement `Into<soroban_sdk::Error>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `Env::panic_with_error`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/matiasboldrini/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/soroban-sdk-23.0.2/src/env.rs:276:48\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m276\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn panic_with_error(&self, error: impl Into<internal::Error>) -> ! {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Env::panic_with_error`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `soroban_sdk::Error: From<&str>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":4595,"byte_end":4617,"line_start":164,"line_end":164,"column_start":37,"column_end":59,"is_primary":true,"text":[{"text":"            panic_with_error!(&env, \"Insufficient balance\");","highlight_start":37,"highlight_end":59}],"label":"the trait `From<&str>` is not implemented for `soroban_sdk::Error`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/matiasboldrini/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/soroban-sdk-23.0.2/src/lib.rs","byte_start":28264,"byte_end":28280,"line_start":903,"line_end":903,"column_start":14,"column_end":30,"is_primary":false,"text":[{"text":"        $env.panic_with_error($error);","highlight_start":14,"highlight_end":30}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":4571,"byte_end":4618,"line_start":164,"line_end":164,"column_start":13,"column_end":60,"is_primary":false,"text":[{"text":"            panic_with_error!(&env, \"Insufficient balance\");","highlight_start":13,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"panic_with_error!","def_site_span":{"file_name":"/Users/matiasboldrini/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/soroban-sdk-23.0.2/src/lib.rs","byte_start":28184,"byte_end":28213,"line_start":901,"line_end":901,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"macro_rules! panic_with_error {","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `soroban_sdk::Error` implements `From<&soroban_sdk::Error>`\n  `soroban_sdk::Error` implements `From<(soroban_sdk::xdr::ScErrorType, soroban_sdk::xdr::ScErrorCode)>`\n  `soroban_sdk::Error` implements `From<ConversionError>`\n  `soroban_sdk::Error` implements `From<Infallible>`\n  `soroban_sdk::Error` implements `From<soroban_env_common::symbol::SymbolError>`\n  `soroban_sdk::Error` implements `From<soroban_sdk::xdr::Error>`\n  `soroban_sdk::Error` implements `From<soroban_sdk::xdr::ScError>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&str` to implement `Into<soroban_sdk::Error>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `Env::panic_with_error`","code":null,"level":"note","spans":[{"file_name":"/Users/matiasboldrini/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/soroban-sdk-23.0.2/src/env.rs","byte_start":8660,"byte_end":8681,"line_start":276,"line_end":276,"column_start":48,"column_end":69,"is_primary":true,"text":[{"text":"    pub fn panic_with_error(&self, error: impl Into<internal::Error>) -> ! {","highlight_start":48,"highlight_end":69}],"label":"required by this bound in `Env::panic_with_error`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `soroban_sdk::Error: From<&str>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:164:37\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m164\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            panic_with_error!(&env, \"Insufficient balance\");\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<&str>` is not implemented for `soroban_sdk::Error`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<&soroban_sdk::Error>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<(soroban_sdk::xdr::ScErrorType, soroban_sdk::xdr::ScErrorCode)>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<ConversionError>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<Infallible>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<soroban_env_common::symbol::SymbolError>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<soroban_sdk::xdr::Error>`\u001b[0m\n\u001b[0m              `soroban_sdk::Error` implements `From<soroban_sdk::xdr::ScError>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&str` to implement `Into<soroban_sdk::Error>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `Env::panic_with_error`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/matiasboldrini/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/soroban-sdk-23.0.2/src/env.rs:276:48\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m276\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn panic_with_error(&self, error: impl Into<internal::Error>) -> ! {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Env::panic_with_error`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 3 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 3 previous errors\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"For more information about this error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0277`.\u001b[0m\n"}
