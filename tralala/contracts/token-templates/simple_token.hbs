#![no_std]
use soroban_sdk::{contract, contractimpl, Address, Env, String, Symbol, symbol_short};

// Storage keys
const ADMIN_KEY: Symbol = symbol_short!("ADMIN");
const NAME_KEY: Symbol = symbol_short!("NAME");
const SYMBOL_KEY: Symbol = symbol_short!("SYMBOL");
const DECIMALS_KEY: Symbol = symbol_short!("DECIMALS");
const SUPPLY_KEY: Symbol = symbol_short!("SUPPLY");
const BALANCE_KEY: Symbol = symbol_short!("BALANCE");
{{#if pausable_enabled}}
const PAUSED_KEY: Symbol = symbol_short!("PAUSED");
{{/if}}

#[contract]
pub struct TokenContract;

#[contractimpl]
impl TokenContract {
    /// Initialize the token contract
    pub fn initialize(
        env: Env, 
        admin: Address, 
        name: String, 
        symbol: String, 
        decimals: u32, 
        initial_supply: i128
    ) {
        // Check if already initialized
        if env.storage().instance().has(&ADMIN_KEY) {
            panic!();
        }
        
        // Store metadata
        env.storage().instance().set(&ADMIN_KEY, &admin);
        env.storage().instance().set(&NAME_KEY, &name);
        env.storage().instance().set(&SYMBOL_KEY, &symbol);
        env.storage().instance().set(&DECIMALS_KEY, &decimals);
        env.storage().instance().set(&SUPPLY_KEY, &initial_supply);
        
        {{#if pausable_enabled}}
        env.storage().instance().set(&PAUSED_KEY, &false);
        {{/if}}

        // Mint initial supply to admin
        if initial_supply > 0 {
            env.storage().persistent().set(&(BALANCE_KEY, &admin), &initial_supply);
        }
    }

    /// Get token name
    pub fn name(env: Env) -> String {
        env.storage()
            .instance()
            .get(&NAME_KEY)
            .unwrap_or_else(|| String::from_str(&env, "{{token_name}}"))
    }

    /// Get token symbol
    pub fn symbol(env: Env) -> String {
        env.storage()
            .instance()
            .get(&SYMBOL_KEY)
            .unwrap_or_else(|| String::from_str(&env, "{{token_symbol}}"))
    }

    /// Get token decimals
    pub fn decimals(env: Env) -> u32 {
        env.storage()
            .instance()
            .get(&DECIMALS_KEY)
            .unwrap_or({{token_decimals}})
    }

    /// Get total supply
    pub fn total_supply(env: Env) -> i128 {
        env.storage()
            .instance()
            .get(&SUPPLY_KEY)
            .unwrap_or(0)
    }

    /// Get balance of an account
    pub fn balance(env: Env, id: Address) -> i128 {
        env.storage()
            .persistent()
            .get(&(BALANCE_KEY, id))
            .unwrap_or(0)
    }

    /// Transfer tokens
    pub fn transfer(env: Env, from: Address, to: Address, amount: i128) {
        {{#if pausable_enabled}}
        // Check if paused
        let paused: bool = env.storage().instance().get(&PAUSED_KEY).unwrap_or(false);
        if paused {
            panic!();
        }
        {{/if}}
        
        from.require_auth();

        if amount <= 0 {
            return;
        }

        // Get current balances
        let from_balance: i128 = env.storage()
            .persistent()
            .get(&(BALANCE_KEY, &from))
            .unwrap_or(0);
            
        if from_balance < amount {
            panic!();
        }

        let to_balance: i128 = env.storage()
            .persistent()
            .get(&(BALANCE_KEY, &to))
            .unwrap_or(0);

        // Update balances
        env.storage()
            .persistent()
            .set(&(BALANCE_KEY, &from), &(from_balance - amount));
        env.storage()
            .persistent()
            .set(&(BALANCE_KEY, &to), &(to_balance + amount));
    }

    {{#if mint_enabled}}
    /// Mint new tokens (admin only)
    pub fn mint(env: Env, to: Address, amount: i128) {
        // Check admin auth
        let admin: Address = env.storage().instance().get(&ADMIN_KEY).unwrap();
        admin.require_auth();
        
        {{#if pausable_enabled}}
        // Check if paused
        let paused: bool = env.storage().instance().get(&PAUSED_KEY).unwrap_or(false);
        if paused {
            panic!();
        }
        {{/if}}

        if amount <= 0 {
            return;
        }

        // Get current balance and supply
        let current_balance: i128 = env.storage()
            .persistent()
            .get(&(BALANCE_KEY, &to))
            .unwrap_or(0);
        let current_supply: i128 = env.storage()
            .instance()
            .get(&SUPPLY_KEY)
            .unwrap_or(0);

        // Update balance and supply
        env.storage()
            .persistent()
            .set(&(BALANCE_KEY, &to), &(current_balance + amount));
        env.storage()
            .instance()
            .set(&SUPPLY_KEY, &(current_supply + amount));
    }
    {{/if}}

    {{#if burn_enabled}}
    /// Burn tokens
    pub fn burn(env: Env, from: Address, amount: i128) {
        {{#if pausable_enabled}}
        // Check if paused
        let paused: bool = env.storage().instance().get(&PAUSED_KEY).unwrap_or(false);
        if paused {
            panic!();
        }
        {{/if}}
        
        from.require_auth();

        if amount <= 0 {
            return;
        }

        // Get current balance and supply
        let current_balance: i128 = env.storage()
            .persistent()
            .get(&(BALANCE_KEY, &from))
            .unwrap_or(0);

        if current_balance < amount {
            panic!();
        }

        let current_supply: i128 = env.storage()
            .instance()
            .get(&SUPPLY_KEY)
            .unwrap_or(0);

        // Update balance and supply
        env.storage()
            .persistent()
            .set(&(BALANCE_KEY, &from), &(current_balance - amount));
        env.storage()
            .instance()
            .set(&SUPPLY_KEY, &(current_supply - amount));
    }
    {{/if}}

    {{#if pausable_enabled}}
    /// Pause the contract (admin only)
    pub fn pause(env: Env) {
        let admin: Address = env.storage().instance().get(&ADMIN_KEY).unwrap();
        admin.require_auth();
        env.storage().instance().set(&PAUSED_KEY, &true);
    }

    /// Unpause the contract (admin only)
    pub fn unpause(env: Env) {
        let admin: Address = env.storage().instance().get(&ADMIN_KEY).unwrap();
        admin.require_auth();
        env.storage().instance().set(&PAUSED_KEY, &false);
    }

    /// Check if contract is paused
    pub fn is_paused(env: Env) -> bool {
        env.storage().instance().get(&PAUSED_KEY).unwrap_or(false)
    }
    {{/if}}

    /// Get admin address
    pub fn admin(env: Env) -> Address {
        env.storage().instance().get(&ADMIN_KEY).unwrap()
    }
}
