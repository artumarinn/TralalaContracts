{
  "contractId": "abb7e716-bc80-468e-bf3d-bcfbfc6e48e9",
  "contractName": "token_test_abb7e716",
  "tokenData": {
    "name": "Test Token",
    "symbol": "TEST",
    "decimals": 2,
    "initialSupply": 1000,
    "features": {
      "mintable": true,
      "burnable": true,
      "pausable": false,
      "upgradeable": false,
      "accessControl": false
    },
    "license": "MIT"
  },
  "userAddress": "GA2T6GR7VXXXBETTERSAFETHANSORRYXXXXXXXXXXXXXXXXXXXXA",
  "wasmPath": "/Users/matiasboldrini/Documents/hackathon/tralalerocontracts-app/tralala/dynamic-contracts/token_test_abb7e716/target/wasm32-unknown-unknown/release/token_test_abb7e716.wasm",
  "compiledAt": "2025-09-16T03:19:02.015Z",
  "rustCode": "#![no_std]\nuse soroban_sdk::{contract, contractimpl, Address, Env, String, Symbol, symbol_short};\n\n// Storage keys\nconst ADMIN_KEY: Symbol = symbol_short!(\"ADMIN\");\nconst NAME_KEY: Symbol = symbol_short!(\"NAME\");\nconst SYMBOL_KEY: Symbol = symbol_short!(\"SYMBOL\");\nconst DECIMALS_KEY: Symbol = symbol_short!(\"DECIMALS\");\nconst SUPPLY_KEY: Symbol = symbol_short!(\"SUPPLY\");\nconst BALANCE_KEY: Symbol = symbol_short!(\"BALANCE\");\n\n#[contract]\npub struct TokenContract;\n\n#[contractimpl]\nimpl TokenContract {\n    /// Initialize the token contract\n    pub fn initialize(\n        env: Env, \n        admin: Address, \n        name: String, \n        symbol: String, \n        decimals: u32, \n        initial_supply: i128\n    ) {\n        // Check if already initialized\n        if env.storage().instance().has(&ADMIN_KEY) {\n            panic!();\n        }\n        \n        // Store metadata\n        env.storage().instance().set(&ADMIN_KEY, &admin);\n        env.storage().instance().set(&NAME_KEY, &name);\n        env.storage().instance().set(&SYMBOL_KEY, &symbol);\n        env.storage().instance().set(&DECIMALS_KEY, &decimals);\n        env.storage().instance().set(&SUPPLY_KEY, &initial_supply);\n        \n\n        // Mint initial supply to admin\n        if initial_supply > 0 {\n            env.storage().persistent().set(&(BALANCE_KEY, &admin), &initial_supply);\n        }\n    }\n\n    /// Get token name\n    pub fn name(env: Env) -> String {\n        env.storage()\n            .instance()\n            .get(&NAME_KEY)\n            .unwrap_or_else(|| String::from_str(&env, \"Test Token\"))\n    }\n\n    /// Get token symbol\n    pub fn symbol(env: Env) -> String {\n        env.storage()\n            .instance()\n            .get(&SYMBOL_KEY)\n            .unwrap_or_else(|| String::from_str(&env, \"TEST\"))\n    }\n\n    /// Get token decimals\n    pub fn decimals(env: Env) -> u32 {\n        env.storage()\n            .instance()\n            .get(&DECIMALS_KEY)\n            .unwrap_or(2)\n    }\n\n    /// Get total supply\n    pub fn total_supply(env: Env) -> i128 {\n        env.storage()\n            .instance()\n            .get(&SUPPLY_KEY)\n            .unwrap_or(0)\n    }\n\n    /// Get balance of an account\n    pub fn balance(env: Env, id: Address) -> i128 {\n        env.storage()\n            .persistent()\n            .get(&(BALANCE_KEY, id))\n            .unwrap_or(0)\n    }\n\n    /// Transfer tokens\n    pub fn transfer(env: Env, from: Address, to: Address, amount: i128) {\n        \n        from.require_auth();\n\n        if amount <= 0 {\n            return;\n        }\n\n        // Get current balances\n        let from_balance: i128 = env.storage()\n            .persistent()\n            .get(&(BALANCE_KEY, &from))\n            .unwrap_or(0);\n            \n        if from_balance < amount {\n            panic!();\n        }\n\n        let to_balance: i128 = env.storage()\n            .persistent()\n            .get(&(BALANCE_KEY, &to))\n            .unwrap_or(0);\n\n        // Update balances\n        env.storage()\n            .persistent()\n            .set(&(BALANCE_KEY, &from), &(from_balance - amount));\n        env.storage()\n            .persistent()\n            .set(&(BALANCE_KEY, &to), &(to_balance + amount));\n    }\n\n    /// Mint new tokens (admin only)\n    pub fn mint(env: Env, to: Address, amount: i128) {\n        // Check admin auth\n        let admin: Address = env.storage().instance().get(&ADMIN_KEY).unwrap();\n        admin.require_auth();\n        \n\n        if amount <= 0 {\n            return;\n        }\n\n        // Get current balance and supply\n        let current_balance: i128 = env.storage()\n            .persistent()\n            .get(&(BALANCE_KEY, &to))\n            .unwrap_or(0);\n        let current_supply: i128 = env.storage()\n            .instance()\n            .get(&SUPPLY_KEY)\n            .unwrap_or(0);\n\n        // Update balance and supply\n        env.storage()\n            .persistent()\n            .set(&(BALANCE_KEY, &to), &(current_balance + amount));\n        env.storage()\n            .instance()\n            .set(&SUPPLY_KEY, &(current_supply + amount));\n    }\n\n    /// Burn tokens\n    pub fn burn(env: Env, from: Address, amount: i128) {\n        \n        from.require_auth();\n\n        if amount <= 0 {\n            return;\n        }\n\n        // Get current balance and supply\n        let current_balance: i128 = env.storage()\n            .persistent()\n            .get(&(BALANCE_KEY, &from))\n            .unwrap_or(0);\n\n        if current_balance < amount {\n            panic!();\n        }\n\n        let current_supply: i128 = env.storage()\n            .instance()\n            .get(&SUPPLY_KEY)\n            .unwrap_or(0);\n\n        // Update balance and supply\n        env.storage()\n            .persistent()\n            .set(&(BALANCE_KEY, &from), &(current_balance - amount));\n        env.storage()\n            .instance()\n            .set(&SUPPLY_KEY, &(current_supply - amount));\n    }\n\n\n    /// Get admin address\n    pub fn admin(env: Env) -> Address {\n        env.storage().instance().get(&ADMIN_KEY).unwrap()\n    }\n}\n",
  "templateData": {
    "token_name": "Test Token",
    "token_symbol": "TEST",
    "token_decimals": 2,
    "initial_supply": 1000,
    "mint_enabled": true,
    "burn_enabled": true,
    "pausable_enabled": false,
    "upgrade_enabled": false,
    "access_control_enabled": false,
    "admin_address": "GA2T6GR7VXXXBETTERSAFETHANSORRYXXXXXXXXXXXXXXXXXXXXA",
    "security_contact": "",
    "license": "MIT"
  }
}